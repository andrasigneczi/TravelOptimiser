TODO
----
- feature mapping
- learning rate dacey
- regularizations, dropout
- batch_norm

- tensorlow
- ArrayFire with my data set http://arrayfire.org/docs/index.htm
- fminunc implementation
- online learning algorithm
- CUDA
- Map Reduce
- PCA

BUG
---
- it seems, the softmax doesn't work well


DONE
----
- export images from coc dataset into big images
- stohastic and mini-batch gradient descent for logistic regression
- Anomaly detection
- K-Mean test


RELU-SIGMOID:
-------------
Iteration: 0; Accuracy: 10%; 4.09534
Iteration: 100; Accuracy: 80.6%; 0.497498
Iteration: 200; Accuracy: 88.06%; 0.34096
Iteration: 300; Accuracy: 90.4%; 0.263189
Iteration: 400; Accuracy: 92.66%; 0.176562
error: Mat::operator(): index out of bounds

RELU-SIGMOID-MOMENTUM:
----------------------
Iteration: 0; Accuracy: 9.62%; 3.62371
Iteration: 100; Accuracy: 48.84%; 2.15311
Iteration: 200; Accuracy: 61.64%; 1.94867
Iteration: 300; Accuracy: 65.52%; 1.57691
Iteration: 400; Accuracy: 65.76%; 1.54866
Iteration: 500; Accuracy: 66%; 1.54139

Time difference = 496577 ms 
Training Set Accuracy: 66.26%

LEAKY-RELU-SIGMOID:
-------------------
Iteration: 0; Accuracy: 10%; 6.56449
Iteration: 100; Accuracy: 80.88%; 1.14731
Iteration: 200; Accuracy: 88.48%; 0.819116
Iteration: 300; Accuracy: 91.92%; 0.685102
Iteration: 400; Accuracy: 94.14%; 0.576878
error: Mat::operator(): index out of bounds

LEAKY-RELU-SIGMOID-MOMENTUM:
----------------------------
Iteration: 0; Accuracy: 10%; 3.70067
Iteration: 100; Accuracy: 75.66%; 1.29691
Iteration: 200; Accuracy: 88.98%; 0.88061
Iteration: 300; Accuracy: 90.82%; 0.797913
Iteration: 400; Accuracy: 91.44%; 0.777623
Iteration: 500; Accuracy: 91.56%; 0.756539
Time difference = 270787 ms 
Training Set Accuracy: 91.9%

TANH-SIGMOID:
-------------
Iteration: 0; Accuracy: 10%; 3.17002
Iteration: 100; Accuracy: 88.34%; 0.382454
Iteration: 200; Accuracy: 93.5%; 0.225564
Iteration: 300; Accuracy: 95.52%; 0.161867
Iteration: 400; Accuracy: 96.96%; 0.123479
Iteration: 500; Accuracy: 98%; 0.0929841

Time difference = 316195 ms 
Training Set Accuracy: 98.78%

TANH-SIGMOID-MOMENTUM:
----------------------
Iteration: 0; Accuracy: 10%; 4.00393
Iteration: 100; Accuracy: 95.64%; 0.347683
Iteration: 200; Accuracy: 97.32%; 0.219611
Iteration: 300; Accuracy: 98.26%; 0.162225
Iteration: 400; Accuracy: 98.9%; 0.126211
Iteration: 500; Accuracy: 99.16%; 0.102471

Time difference = 402995 ms 
Training Set Accuracy: 99.3%


TANH-SIGMOID-ADAM:
----------------------
Iteration: 0; Accuracy: 18.46%; 3.32794
Iteration: 100; Accuracy: 95.34%; 0.375779
Iteration: 200; Accuracy: 98.02%; 0.192595
Iteration: 300; Accuracy: 98.88%; 0.116841
Iteration: 400; Accuracy: 99.12%; 0.0795168
Iteration: 500; Accuracy: 99.56%; 0.051767

Time difference = 551011 ms 
Training Set Accuracy: 99.76%

TANH-SIGMOID-ADAM and SOFTMAX for prediction/accuracy:
------------------------------------------------------
Iteration: 0; Accuracy: 20.94%; 8.5036
Iteration: 100; Accuracy: 95.52%; 6.3881
Iteration: 200; Accuracy: 98%; 6.29954
Iteration: 300; Accuracy: 98.88%; 6.26437
Iteration: 400; Accuracy: 99.12%; 6.24656
Iteration: 500; Accuracy: 99.56%; 6.23301

Time difference = 1032556 ms 
Training Set Accuracy: 99.76%

TANH-SIGMOID-MOMENTUM and SOFTMAX for prediction/accuracy:
----------------------------------------------------------
Iteration: 0; Accuracy: 22.64%; 8.51638
Iteration: 100; Accuracy: 95.66%; 6.38473
Iteration: 200; Accuracy: 97.32%; 6.31429
Iteration: 300; Accuracy: 98.26%; 6.28322
Iteration: 400; Accuracy: 98.9%; 6.26403
Iteration: 500; Accuracy: 99.16%; 6.25293

Time difference = 291568 ms 
Training Set Accuracy: 99.3%

TANH-SOFTMAX:
-------------
Iteration: 0; Accuracy: 11.4%; 8.52285
Iteration: 100; Accuracy: 16.24%; 8.5545
Iteration: 200; Accuracy: 14.7%; 8.55506
Iteration: 300; Accuracy: 13.76%; 8.55198
Iteration: 400; Accuracy: 13.28%; 8.54888
Iteration: 500; Accuracy: 12.92%; 8.5462

Time difference = 320209 ms 
Training Set Accuracy: 12.78%







numpy installation:
-------------------
sudo apt-get install python3-numpy
sudo apt-get install python3-h5py
sudo apt-get install python3-matplotlib
sudo apt-get install python3-scipy


# GRADED FUNCTION: compute_cost_with_regularization

def compute_cost_with_regularization(A3, Y, parameters, lambd):
    """
    Implement the cost function with L2 regularization. See formula (2) above.
    
    Arguments:
    A3 -- post-activation, output of forward propagation, of shape (output size, number of examples)
    Y -- "true" labels vector, of shape (output size, number of examples)
    parameters -- python dictionary containing parameters of the model
    
    Returns:
    cost - value of the regularized loss function (formula (2))
    """
    m = Y.shape[1]
    W1 = parameters["W1"]
    W2 = parameters["W2"]
    W3 = parameters["W3"]
    
    cross_entropy_cost = compute_cost(A3, Y) # This gives you the cross-entropy part of the cost
    
    ### START CODE HERE ### (approx. 1 line)
    L2_regularization_cost = 1/m*lambd/2*(np.sum(np.square(W1))+np.sum(np.square(W2)) + np.sum(np.square(W3)))
    ### END CODER HERE ###
    
    cost = cross_entropy_cost + L2_regularization_cost
    
    return cost
    
    
    # GRADED FUNCTION: backward_propagation_with_regularization

def backward_propagation_with_regularization(X, Y, cache, lambd):
    """
    Implements the backward propagation of our baseline model to which we added an L2 regularization.
    
    Arguments:
    X -- input dataset, of shape (input size, number of examples)
    Y -- "true" labels vector, of shape (output size, number of examples)
    cache -- cache output from forward_propagation()
    lambd -- regularization hyperparameter, scalar
    
    Returns:
    gradients -- A dictionary with the gradients with respect to each parameter, activation and pre-activation variables
    """
    
    m = X.shape[1]
    (Z1, A1, W1, b1, Z2, A2, W2, b2, Z3, A3, W3, b3) = cache
    
    dZ3 = A3 - Y
    
    ### START CODE HERE ### (approx. 1 line)
    dW3 = 1./m * np.dot(dZ3, A2.T) + lambd/m*W3
    ### END CODE HERE ###
    db3 = 1./m * np.sum(dZ3, axis=1, keepdims = True)
    
    dA2 = np.dot(W3.T, dZ3)
    dZ2 = np.multiply(dA2, np.int64(A2 > 0))
    ### START CODE HERE ### (approx. 1 line)
    dW2 = 1./m * np.dot(dZ2, A1.T) + lambd/m*W2
    ### END CODE HERE ###
    db2 = 1./m * np.sum(dZ2, axis=1, keepdims = True)
    
    dA1 = np.dot(W2.T, dZ2)
    dZ1 = np.multiply(dA1, np.int64(A1 > 0))
    ### START CODE HERE ### (approx. 1 line)
    dW1 = 1./m * np.dot(dZ1, X.T) + lambd/m*W1
    ### END CODE HERE ###
    db1 = 1./m * np.sum(dZ1, axis=1, keepdims = True)
    
    gradients = {"dZ3": dZ3, "dW3": dW3, "db3": db3,"dA2": dA2,
                 "dZ2": dZ2, "dW2": dW2, "db2": db2, "dA1": dA1, 
                 "dZ1": dZ1, "dW1": dW1, "db1": db1}
    
    return gradients
    
    
# GRADED FUNCTION: forward_propagation_with_dropout

def forward_propagation_with_dropout(X, parameters, keep_prob = 0.5):
    """
    Implements the forward propagation: LINEAR -> RELU + DROPOUT -> LINEAR -> RELU + DROPOUT -> LINEAR -> SIGMOID.
    
    Arguments:
    X -- input dataset, of shape (2, number of examples)
    parameters -- python dictionary containing your parameters "W1", "b1", "W2", "b2", "W3", "b3":
                    W1 -- weight matrix of shape (20, 2)
                    b1 -- bias vector of shape (20, 1)
                    W2 -- weight matrix of shape (3, 20)
                    b2 -- bias vector of shape (3, 1)
                    W3 -- weight matrix of shape (1, 3)
                    b3 -- bias vector of shape (1, 1)
    keep_prob - probability of keeping a neuron active during drop-out, scalar
    
    Returns:
    A3 -- last activation value, output of the forward propagation, of shape (1,1)
    cache -- tuple, information stored for computing the backward propagation
    """
    
    np.random.seed(1)
    
    # retrieve parameters
    W1 = parameters["W1"]
    b1 = parameters["b1"]
    W2 = parameters["W2"]
    b2 = parameters["b2"]
    W3 = parameters["W3"]
    b3 = parameters["b3"]
    
    # LINEAR -> RELU -> LINEAR -> RELU -> LINEAR -> SIGMOID
    Z1 = np.dot(W1, X) + b1
    A1 = relu(Z1)
    ### START CODE HERE ### (approx. 4 lines)         # Steps 1-4 below correspond to the Steps 1-4 described above. 
    D1 = np.random.rand(A1.shape[0],A1.shape[1])      # Step 1: initialize matrix D1 = np.random.rand(..., ...)
    D1 = (D1 < keep_prob)                             # Step 2: convert entries of D1 to 0 or 1 (using keep_prob as the threshold)
    A1 = A1 * D1                                      # Step 3: shut down some neurons of A1
    A1 = A1 / keep_prob                               # Step 4: scale the value of neurons that haven't been shut down
    ### END CODE HERE ###
    Z2 = np.dot(W2, A1) + b2
    A2 = relu(Z2)
    ### START CODE HERE ### (approx. 4 lines)
    D2 = np.random.rand(A2.shape[0],A2.shape[1])      # Step 1: initialize matrix D2 = np.random.rand(..., ...)
    D2 = (D2 < keep_prob)                             # Step 2: convert entries of D2 to 0 or 1 (using keep_prob as the threshold)
    A2 = A2 * D2                                      # Step 3: shut down some neurons of A2
    A2 = A2 / keep_prob                               # Step 4: scale the value of neurons that haven't been shut down
    ### END CODE HERE ###
    Z3 = np.dot(W3, A2) + b3
    A3 = sigmoid(Z3)
    
    cache = (Z1, D1, A1, W1, b1, Z2, D2, A2, W2, b2, Z3, A3, W3, b3)
    
    return A3, cache
    
# GRADED FUNCTION: backward_propagation_with_dropout

def backward_propagation_with_dropout(X, Y, cache, keep_prob):
    """
    Implements the backward propagation of our baseline model to which we added dropout.
    
    Arguments:
    X -- input dataset, of shape (2, number of examples)
    Y -- "true" labels vector, of shape (output size, number of examples)
    cache -- cache output from forward_propagation_with_dropout()
    keep_prob - probability of keeping a neuron active during drop-out, scalar
    
    Returns:
    gradients -- A dictionary with the gradients with respect to each parameter, activation and pre-activation variables
    """
    
    m = X.shape[1]
    (Z1, D1, A1, W1, b1, Z2, D2, A2, W2, b2, Z3, A3, W3, b3) = cache
    
    dZ3 = A3 - Y
    dW3 = 1./m * np.dot(dZ3, A2.T)
    db3 = 1./m * np.sum(dZ3, axis=1, keepdims = True)
    dA2 = np.dot(W3.T, dZ3)
    ### START CODE HERE ### (≈ 2 lines of code)
    dA2 = dA2 * D2          # Step 1: Apply mask D2 to shut down the same neurons as during the forward propagation
    dA2 = dA2 / keep_prob   # Step 2: Scale the value of neurons that haven't been shut down
    ### END CODE HERE ###
    dZ2 = np.multiply(dA2, np.int64(A2 > 0))
    dW2 = 1./m * np.dot(dZ2, A1.T)
    db2 = 1./m * np.sum(dZ2, axis=1, keepdims = True)
    
    dA1 = np.dot(W2.T, dZ2)
    ### START CODE HERE ### (≈ 2 lines of code)
    dA1 = dA1 *D1           # Step 1: Apply mask D1 to shut down the same neurons as during the forward propagation
    dA1 = dA1 / keep_prob   # Step 2: Scale the value of neurons that haven't been shut down
    ### END CODE HERE ###
    dZ1 = np.multiply(dA1, np.int64(A1 > 0))
    dW1 = 1./m * np.dot(dZ1, X.T)
    db1 = 1./m * np.sum(dZ1, axis=1, keepdims = True)
    
    gradients = {"dZ3": dZ3, "dW3": dW3, "db3": db3,"dA2": dA2,
                 "dZ2": dZ2, "dW2": dW2, "db2": db2, "dA1": dA1, 
                 "dZ1": dZ1, "dW1": dW1, "db1": db1}
    
    return gradients
    
